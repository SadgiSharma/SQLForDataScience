Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 records
ii. Business table = 10000 records
iii. Category table = 10000 records
iv. Checkin table = 10000 records
v. elite_years table = 10000 records
vi. friend table = 10000 records
vii. hours table = 10000 records
viii. photo table = 10000 records
ix. review table = 10000 records
x. tip table = 10000 records
xi. user table = 10000 records
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 records
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000 (id)
vi. Checkin = 493
vii. Photo = 6493(business_id)
viii. Tip = 3979 (business_id)
ix. User = 10000(id)
x. Friend = 11(user_id)
xi. Elite_years = 2780(user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	No
	
	SQL code used to arrive at answer:
Select *
From user

Where id is Null;
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:5		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000	avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: (Most reviews include the number of reviews done by a person with one id)
                                          Select city, sum(review_count) as rev

                                          From business
                                          
Group by City
                                          
Order by rev desc;
	
	
	Copy and Paste the Result Below:
city            |   rev |
+-----------------+-------+
| Las Vegas       | 82854 |
| Phoenix         | 34503 |
| Toronto         | 24113 |
| Scottsdale      | 20614 |
| Charlotte       | 12523 |
| Henderson       | 10871 |
| Tempe           | 10504 |
| Pittsburgh      |  9798 |
| Montréal        |  9448 |
| Chandler        |  8112 |
| Mesa            |  6875 |
| Gilbert         |  6380 |
| Cleveland       |  5593 |
| Madison         |  5265 |
| Glendale        |  4406 |
| Mississauga     |  3814 |
| Edinburgh       |  2792 |
| Peoria          |  2624 |
| North Las Vegas |  2438 |
| Markham         |  2352 |
| Champaign       |  2029 |
| Stuttgart       |  1849 |
| Surprise        |  1520 |
| Lakewood        |  1465 |
| Goodyear        |  1155 |
+-----------------+-------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT  Stars ,count(review_count)
FROM business
WHERE city = "Avon"
GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+---------------------+
| stars | count(review_count) |
+-------+---------------------+
|   1.5 |                   1 |
|   2.5 |                   2 |
|   3.5 |                   3 |
|   4.0 |                   2 |
|   4.5 |                   1 |
|   5.0 |                   1 |
+-------+---------------------+


ii. Beachwood

SQL code used to arrive at answer:
SELECT  Stars ,count(review_count)
FROM business
WHERE City = "Beachwood"
GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+---------------------+
| stars | count(review_count) |
+-------+---------------------+
|   2.0 |                   1 |
|   2.5 |                   1 |
|   3.0 |                   2 |
|   3.5 |                   2 |
|   4.0 |                   1 |
|   4.5 |                   2 |
|   5.0 |                   5 |
+-------+---------------------+	


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:Select id, review_count, name
                                          
From user
                                          
Order by review_count desc
                                          
Limit 3;
	
		
	Copy and Paste the Result Below:
 id                     | review_count | name   |
+------------------------+--------------+--------+
| -G7Zkl1wIWBBmD0KRy_sCw |         2000 | Gerald |
| -3s52C4zL_DHRK0ULG6qtg |         1629 | Sara   |
| -8lbUNlXVSoXqaRRiHiSNg |         1339 | Yuri   |
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results: There is no correlation between having fans and writing more reviews. This can be seen through the below mentioned query. A user who has written 2000 reviews has 253 fans while another user who wrote 609 reviews has 503 fans. There is no positive correlation between the two factors. 

Select review_count, fans

From user

Group by id

Order by fans desc;

Output:
+--------------+------+
| review_count | fans |
+--------------+------+
|          609 |  503 |
|          968 |  497 |
|         1153 |  311 |
|         2000 |  253 |
|          930 |  173 |
|          813 |  159 |
|          377 |  133 |
|         1215 |  126 |
|          862 |  124 |
|          834 |  120 |
|          861 |  115 |
|          408 |  111 |
|          255 |  105 |
|         1039 |  104 |
|          694 |  101 |
|         1246 |  101 |
|          307 |   96 |
|          584 |   89 |
|          842 |   85 |
|          220 |   84 |
|          408 |   81 |
|          178 |   80 |
|          754 |   78 |
|         1339 |   76 |
|          161 |   73 |
+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "love" rather than "hate".

	
	SQL code used to arrive at answer:
Select count(text)

From review

Where text like '%love%';



Select count(text)

From Review

Where text like '%hate%';

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
Select id, fans, name
From user

Order by fans desc

Limit (10);
	
	
	Copy and Paste the Result Below:
+------------------------+------+-----------+
| id                     | fans | name      |
+------------------------+------+-----------+
| -9I98YbNQnLdAmcYfb324Q |  503 | Amy       |
| -8EnCioUmDygAbsYZmTeRQ |  497 | Mimi      |
| --2vR0DIsmQ6WfcSzKWigw |  311 | Harald    |
| -G7Zkl1wIWBBmD0KRy_sCw |  253 | Gerald    |
| -0IiMAZI2SsQ7VmyzJjokQ |  173 | Christine |
| -g3XIcCb2b-BD0QBCcq2Sw |  159 | Lisa      |
| -9bbDysuiWeo2VShFJJtcw |  133 | Cat       |
| -FZBTkAZEXoP7CYvRV2ZwQ |  126 | William   |
| -9da1xk7zgnnfO1uTVYGkA |  124 | Fran      |
| -lh59ko3dxChBSZ9U7LfUw |  120 | Lissa     |
+------------------------+------+-----------+

	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:Select name, fans, useful, funny, review_count
                                          
From user

                                          Order by fans desc
                                          
Limit 10;
	
	
	Copy and Paste the Result Below:
+-----------+------+--------+--------+--------------+
| name      | fans | useful |  funny | review_count |
+-----------+------+--------+--------+--------------+
| Amy       |  503 |   3226 |   2554 |          609 |
| Mimi      |  497 |    257 |    138 |          968 |
| Harald    |  311 | 122921 | 122419 |         1153 |
| Gerald    |  253 |  17524 |   2324 |         2000 |
| Christine |  173 |   4834 |   6646 |          930 |
| Lisa      |  159 |     48 |     13 |          813 |
| Cat       |  133 |   1062 |    672 |          377 |
| William   |  126 |   9363 |   9361 |         1215 |
| Fran      |  124 |   9851 |   7606 |          862 |
| Lissa     |  120 |    455 |    150 |          834 |
+-----------+------+--------+--------+--------------+
	
	
	Please explain your findings and interpretation of the results:
As per the table above, it can be inferred that there is no strong relationship between having high number of fans and being listed as "useful" or "funny". This statement is supported by examples of users like Lisa (top 6 in fans but has minimum useful and funny tags) and Harald (amongst top 3 in fans but has extremely high number of useful and funny tags). The case of Harald looks like an outlier in this situation. 
	
	
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours? As per the query results, it can be seen that, the businesses with 4-5 ratings run for shorter time than the businesses with ratings 2-3. 


ii. Do the two groups you chose to analyze have a different number of reviews? Yes, the review count for two groups are different. Businesses with ratings between 4-5 stars have more reviews than the businesses with ratings between 2 and 3. Total reviews for 4-5 star place is 272 while it is only 70 for places with ratings between 2 and 3.
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain. Every business is in a different area as they have different postal codes. Also, there are 13 addresses where restaurants with 4-5 ratings are situated while there are only 7 postal codes where restaurants with ratings 2-3 are situated. 

SQL code used for analysis: City: Toronto, Category: Food
Select sum(review_count), min(hours), category,name,city,avg(stars),count(postal_code),
       
      Case 
            
           
          When stars Between 2 and 3 then '2-3 stars'
            
           
          When stars Between 4 AND 5 then '4-5 stars'
		       
      End as stars

From business

Inner join hours

On business.id=hours.business_id

Inner join category

On category.business_id=business.id

Where city='Toronto' and category='Food'

Group by stars;

Output:
+-------------------+--------------------+----------+--------------+---------+---------------+--------------------+-----------+
| sum(review_count) | min(hours)         | category | name         | city    |    avg(stars) | count(postal_code) | stars     |
+-------------------+--------------------+----------+--------------+---------+---------------+--------------------+-----------+
|                70 | Friday|8:00-22:00  | Food     | Loblaws      | Toronto |           2.5 |                  7 | 2-3 stars |
|               272 | Friday|15:00-21:00 | Food     | Halo Brewery | Toronto | 4.26923076923 |                 13 | 4-5 stars |
+-------------------+--------------------+----------+--------------+---------+---------------+--------------------+-----------+

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Maximum number of reviews have been written for open businesses and the average review count is 23.19 for closed businesses while it is 31.75 for open businesses. 
         
         
ii. Difference 2: There are 1520 cities with closed businesses and 8480 cities have open businesses.
         
         
         
SQL code used for analysis:Select avg(review_count), max(review_count), max(stars), min(stars), avg(stars), count(City), is_open
                           
From business

                           Group by is_open;


(OR)
SELECT AVG(review_count)
FROM business
WHERE is_open = 1
UNION
SELECT AVG(review_count)
FROM business
WHERE is_open = 0

Output:
+-------------------+-------------------+------------+------------+---------------+-------------+---------+
| avg(review_count) | max(review_count) | max(stars) | min(stars) |    avg(stars) | count(City) | is_open |
+-------------------+-------------------+------------+------------+---------------+-------------+---------+
|     23.1980263158 |               700 |        5.0 |        1.0 | 3.52039473684 |        1520 |       0 |
|     31.7570754717 |              3873 |        5.0 |        1.0 | 3.67900943396 |        8480 |       1 |
+-------------------+-------------------+------------+------------+---------------+-------------+---------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do: 
         If a place wants to increase its popularity and offer discount coupons to some of its best customers (users). On what basis should it categorize the customers (users) in order to reach out to maximum people and increase the long term revenue. Here, I would like to analyze the critical factors about the users who rate a place on yelp that might be essential for a business. 
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
         For the above analysis, I would require the data of all the users in order to understand their fans, time since yelping, and the authenticity of rating a place. If a user has more fans and is generous in rating a place, he/she would be an ideal candidate to offer a discount coupon. Here, further the data about photos uploaded by a user and the number of useful comments posted will be taken into account for analyzing the problem. 
                           
                  
iii. Output of your finished dataset:
+-----------+-------+-------------------+--------+------+--------------+----------------------+
| name      | years | compliment_photos | useful | fans | review_count | average_stars_rating |
+-----------+-------+-------------------+--------+------+--------------+----------------------+
| Yuri      |    11 |                47 |   1166 |   76 |         1339 | high                 |
| William   |     4 |               179 |   9363 |  126 |         1215 | high                 |
| Harald    |     7 |             22219 | 122921 |  311 |         1153 | high                 |
| Mimi      |     8 |               471 |    257 |  497 |          968 | high                 |
| Fran      |     7 |              2428 |   9851 |  124 |          862 | high                 |
| Christina |     7 |                32 |    158 |   85 |          842 | high                 |
| Lisa      |    10 |                88 |     48 |  159 |          813 | high                 |
| Lyn       |    10 |                83 |   1539 |   45 |          675 | high                 |
| Jenn      |    13 |                18 |   1044 |   62 |          657 | high                 |
| Dan       |    12 |                 2 |     10 |   29 |          615 | high                 |
| Linda     |    14 |                33 |   3177 |   89 |          584 | high                 |
| Nick      |    11 |                 2 |     28 |   16 |          514 | high                 |
| Tiffany   |    11 |               155 |   1366 |  111 |          408 | high                 |
| Marco     |     6 |                 3 |     34 |    7 |          403 | high                 |
| kathleen  |    12 |                 2 |     18 |   38 |          402 | high                 |
| Justin    |     8 |                12 |    587 |   17 |          399 | high                 |
| Princeton |    10 |               200 |   1594 |   64 |          376 | high                 |
| Alan      |     7 |                 2 |     64 |   28 |          353 | high                 |
| Mike      |     5 |                57 |   4656 |   65 |          346 | high                 |
| Andrew    |     9 |                 4 |     82 |   38 |          344 | high                 |
| Serene    |     8 |                 1 |      8 |    9 |          340 | high                 |
| Chris     |     7 |                21 |   1184 |   31 |          334 | high                 |
| Paul      |     5 |                 6 |     47 |    5 |          333 | high                 |
| Andy      |    13 |                 8 |    260 |   26 |          324 | high                 |
| Dave      |    10 |                 0 |      0 |    5 |          311 | high                 |
+-----------+-------+-------------------+--------+------+--------------+----------------------+
(Output limit exceeded, 25 of 4112 total rows shown)
         
         
iv. Provide the SQL code you used to create your final dataset:
Select user.name,(strftime('%Y', 'now') -strftime('%Y', yelping_since)) as years,    
       user.compliment_photos,
       
       user.useful,
       
       user.fans as fans,
       
       user.review_count,
       
       
      CASE
           
         When average_stars between 1 and 3 then 'low'
           
         When average_stars between 3 and 4 then 'medium'
           
         When average_stars between 4 and 5 then 'high'
       
      End as average_stars_rating

From user

Where average_stars_rating = 'high'

Order by review_count desc
   


(OR) To check if the dimension of the text in review correlates with the stars

SELECT count(*), AVG(stars)
FROM review
WHERE SUBSTR(text,3000) <> ""
UNION
SELECT count(*), AVG(stars)
FROM review   

Output:
+----------+---------------+
| count(*) |    AVG(stars) |
+----------+---------------+
|       95 | 3.08421052632 |
|    10000 |        3.7082 |
+----------+---------------+
